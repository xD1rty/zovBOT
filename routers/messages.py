import datetime
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from states.reg import ReferralRegistration, CompanyRegistration
from keyboards.inline import add_to_chat
from aiogram.enums import ChatType
import os

from pyrogram import Client

from pyrogram.raw.functions.contacts import ResolveUsername

pyrogram_client = Client(
    "bot",
    bot_token=os.getenv("TG_TOKEN"),
    api_id=os.getenv("API_ID"),
    api_hash=os.getenv("API_HASH")
)

from dateutil.parser import parse

import db

main_router = Router()


@main_router.message(CommandStart(), F.chat.type == ChatType.PRIVATE)
async def start_bot(message: Message, command: Command, state: FSMContext):
    if command.args == None:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ. \n"
                             "–î–ª—è –Ω–∞—á–∞–ª–∞, —Ö–æ—Ç–µ–ª –±—ã –ø–æ–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
        await state.set_state(CompanyRegistration.name)
    else:
        await message.answer("–ï—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ")


@main_router.message(CompanyRegistration.name, F.chat.type == ChatType.PRIVATE)
async def get_username_and_request_id(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—á–µ–Ω—å –∫—Ä—É—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ID –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏. \n"
                         "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–ø–∏—Å–Ω—ã–º–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏")
    await state.set_state(CompanyRegistration.company_id)


@main_router.message(CompanyRegistration.company_id, F.chat.type == ChatType.PRIVATE)
async def get_id_and_request_chat_invite(message: Message, state: FSMContext):
    await state.update_data(id=message.text)
    await message.answer("–î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —á–∞—Ç. –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –∞–π–¥–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –µ–≥–æ", reply_markup=add_to_chat)
    await state.set_state(CompanyRegistration.chat_id)

@main_router.message(CompanyRegistration.chat_id, F.chat.type == ChatType.PRIVATE)
async def get_id_and_request_chat_invite_2(message: Message, bot: Bot, state: FSMContext):
    try:
        data = await state.get_data()
        await message.answer("–í—Å–µ –≥–æ—Ç–æ–≤–æ! –ö–æ–º–ø–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        await bot.send_message(int(message.text), f"–ü—Ä–∏–≤–µ—Ç, {data['name']}! \n–ú—ã –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É - t.me/soZOVon_bot?start={data['id']}")
        await state.clear()
    except TypeError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –µ—â–µ —Ä–∞–∑!")

@main_router.message(CommandStart())
async def start_chat_bot(message: Message):
    await message.answer(f"ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: {message.chat.id}")

@main_router.message(Command("meet"))
async def schedule_meet(message: Message):
    time = parse(message.text.split("\n")[2])
    participants = message.text.split("\n")[1]
    
    try:
        await pyrogram_client.start()
    except:
        pass
    
    ids = {}

    for i in participants.split(" "):
        res = await pyrogram_client.invoke(ResolveUsername(username=i.replace("@", "")))
        ids[i] = res.users[0].id

    org = await db.register(message.from_user.username, message.from_user.id)
    group = await db.create_group(org.id)

    for k in ids:
        user = await db.register(k, ids[k])

        await db.add_user_to_group(user.id, group.id)
    
    await db.create_zov(time, group.id)

    await message.answer("üöÄ‚úÖ")
